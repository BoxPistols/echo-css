@import "./_grid_float.scss";
@import "./_grid_flex.scss";
@import "./_text.scss";

@mixin chevron( $rotate: 'right', $color: $body-color ) {
    position: relative;

    &:before,
    &:after {
        content: "";
        position: absolute;
        width: .5em;
        height: 2px;
        background-color: $color;
    }

    @if ($rotate == 'right') {

        &:before {
            top: 55%;
            margin-left: -1px;
            -webkit-transform: rotate(40deg);
            transform: rotate(40deg);
            -webkit-transform-origin: 100% 100%;
            transform-origin: 100% 100%;
        }
        &:after {
            top: 55%;
            -webkit-transform: rotate(-40deg);
            transform: rotate(-40deg);
            -webkit-transform-origin: 100% 100%;
            transform-origin: 100% 100%;
        }

    }

    @if ($rotate == 'down') {

        &:before {
            top: 55%;
            -webkit-transform: rotate(50deg);
            transform: rotate(50deg);
            -webkit-transform-origin: 100% 100%;
            transform-origin: 100% 100%;
        }
        &:after {
            top: 55%;
            margin-right: -1px;
            -webkit-transform: rotate(-50deg);
            transform: rotate(-50deg);
            -webkit-transform-origin: 0% 100%;
            transform-origin: 0% 100%;
        }

    }

    @content;

}


@mixin clearfix() {
    &:before,
    &:after {
      content: "";
      display: table;
    }
    &:after {
      clear: both;
    }
}


@mixin sprites($type, $file, $width, $height, $imgwidth:100%, $imgheight:100%, $position:center center) {

  @if ($type == icon) {
      content: "";
      display: inline-block;
      width: $width;
      height: $height;
      vertical-align: middle;
  }
  background: url(../images/#{$file}) $position no-repeat;
  background-size: $imgwidth $imgheight;

}


@mixin animation($delay, $duration, $function, $animation-name) {
  -moz-animation-delay: $delay;
  -moz-animation-duration: $duration;
  -moz-animation-timing-function: $function;
  -moz-animation-name: $animation-name;
  -moz-animation-fill-mode: forwards;

  -o-animation-delay: $delay;
  -o-animation-duration: $duration;
  -o-animation-timing-function: $function;
  -o-animation-name: $animation-name;
  -o-animation-fill-mode: forwards;

  animation-delay: $delay;
  animation-duration: $duration;
  animation-timing-function: $function;
  animation-name: $animation-name;
  animation-fill-mode: forwards;
}

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }

  @-moz-keyframes #{$animation-name} {
    @content;
  }

  @-o-keyframes #{$animation-name} {
    @content;
  }

  @keyframes #{$animation-name} {
    @content;
  }
}


@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 0.1, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  @include media-breakpoint-up($name, $breakpoints) {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

@mixin make-container($gutter: $grid-gutter-widths) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  (map-get($grid-gutter-widths, md) / 2);
  padding-right: (map-get($grid-gutter-widths, md) / 2);
  @include clearfix();
}

@mixin button-variant(
  $color,
  $background,
  $border,
  $hover-color,
  $hover-background,
  $hover-border
) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:hover,
  &:focus,
  &:active,
  &.active {
    color: $hover-color;
    background-color: $hover-background;
    border-color: $hover-border;
  }

  &.disabled,
  &:disabled,
  fieldset[disabled] & {
    opacity: .8;

    &:hover,
    &.hover,
    &:focus,
    &.focus {
      color: $color;
      background-color: $background;
      border-color: $border;
    }

  }

  @at-root {

    a:hover &,
    a:focus &,
    a:active & {
      color: $hover-color;
      background-color: $hover-background;
      border-color: $hover-border;
    }

  }

}

